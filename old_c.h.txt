std::vector<unsigned char>* decodeOneStep(const char* filename, std::vector<unsigned char> *image) {
	unsigned width, height;

	//decode
	unsigned error = lodepng::decode(*image, width, height, filename);

	//if there's an error, display it
	if (error)
		std::cout << "decoder error " << error << ": " << lodepng_error_text(error) << std::endl;
	return image;
	//the pixels are now in the vector "image", 4 bytes per pixel, ordered RGBARGBA..., use it as texture, draw it, ...
}
void clPrintDevInfo(cl_device_id device) {
	char device_string[1024];

	// CL_DEVICE_NAME
	clGetDeviceInfo(device, CL_DEVICE_NAME, sizeof(device_string), &device_string, NULL);
	printf("  CL_DEVICE_NAME: \t\t\t%s\n", device_string);

	// CL_DEVICE_VENDOR
	clGetDeviceInfo(device, CL_DEVICE_VENDOR, sizeof(device_string), &device_string, NULL);
	printf("  CL_DEVICE_VENDOR: \t\t\t%s\n", device_string);

	// CL_DRIVER_VERSION
	clGetDeviceInfo(device, CL_DRIVER_VERSION, sizeof(device_string), &device_string, NULL);
	printf("  CL_DRIVER_VERSION: \t\t\t%s\n", device_string);

	// CL_DEVICE_INFO
	cl_device_type type;
	clGetDeviceInfo(device, CL_DEVICE_TYPE, sizeof(type), &type, NULL);
	if (type & CL_DEVICE_TYPE_CPU)
		printf("  CL_DEVICE_TYPE:\t\t\t%s\n", "CL_DEVICE_TYPE_CPU");
	if (type & CL_DEVICE_TYPE_GPU)
		printf("  CL_DEVICE_TYPE:\t\t\t%s\n", "CL_DEVICE_TYPE_GPU");
	if (type & CL_DEVICE_TYPE_ACCELERATOR)
		printf("  CL_DEVICE_TYPE:\t\t\t%s\n", "CL_DEVICE_TYPE_ACCELERATOR");
	if (type & CL_DEVICE_TYPE_DEFAULT)
		printf("  CL_DEVICE_TYPE:\t\t\t%s\n", "CL_DEVICE_TYPE_DEFAULT");

	// CL_DEVICE_MAX_COMPUTE_UNITS
	cl_uint compute_units;
	clGetDeviceInfo(device, CL_DEVICE_MAX_COMPUTE_UNITS, sizeof(compute_units), &compute_units, NULL);
	printf("  CL_DEVICE_MAX_COMPUTE_UNITS:\t\t%u\n", compute_units);

	// CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS
	size_t workitem_dims;
	clGetDeviceInfo(device, CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS, sizeof(workitem_dims), &workitem_dims, NULL);
	printf("  CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS:\t%u\n", workitem_dims);

	// CL_DEVICE_MAX_WORK_ITEM_SIZES
	size_t workitem_size[3];
	clGetDeviceInfo(device, CL_DEVICE_MAX_WORK_ITEM_SIZES, sizeof(workitem_size), &workitem_size, NULL);
	printf("  CL_DEVICE_MAX_WORK_ITEM_SIZES:\t%u / %u / %u \n", workitem_size[0], workitem_size[1], workitem_size[2]);

	// CL_DEVICE_MAX_WORK_GROUP_SIZE
	size_t workgroup_size;
	clGetDeviceInfo(device, CL_DEVICE_MAX_WORK_GROUP_SIZE, sizeof(workgroup_size), &workgroup_size, NULL);
	printf("  CL_DEVICE_MAX_WORK_GROUP_SIZE:\t%u\n", workgroup_size);

	// CL_DEVICE_MAX_CLOCK_FREQUENCY
	cl_uint clock_frequency;
	clGetDeviceInfo(device, CL_DEVICE_MAX_CLOCK_FREQUENCY, sizeof(clock_frequency), &clock_frequency, NULL);
	printf("  CL_DEVICE_MAX_CLOCK_FREQUENCY:\t%u MHz\n", clock_frequency);

	// CL_DEVICE_ADDRESS_BITS
	cl_uint addr_bits;
	clGetDeviceInfo(device, CL_DEVICE_ADDRESS_BITS, sizeof(addr_bits), &addr_bits, NULL);
	printf("  CL_DEVICE_ADDRESS_BITS:\t\t%u\n", addr_bits);

	// CL_DEVICE_MAX_MEM_ALLOC_SIZE
	cl_ulong max_mem_alloc_size;
	clGetDeviceInfo(device, CL_DEVICE_MAX_MEM_ALLOC_SIZE, sizeof(max_mem_alloc_size), &max_mem_alloc_size, NULL);
	printf("  CL_DEVICE_MAX_MEM_ALLOC_SIZE:\t\t%u MByte\n", (unsigned int)(max_mem_alloc_size / (1024 * 1024)));

	// CL_DEVICE_GLOBAL_MEM_SIZE
	cl_ulong mem_size;
	clGetDeviceInfo(device, CL_DEVICE_GLOBAL_MEM_SIZE, sizeof(mem_size), &mem_size, NULL);
	printf("  CL_DEVICE_GLOBAL_MEM_SIZE:\t\t%u MByte\n", (unsigned int)(mem_size / (1024 * 1024)));

	// CL_DEVICE_ERROR_CORRECTION_SUPPORT
	cl_bool error_correction_support;
	clGetDeviceInfo(device, CL_DEVICE_ERROR_CORRECTION_SUPPORT, sizeof(error_correction_support), &error_correction_support, NULL);
	printf("  CL_DEVICE_ERROR_CORRECTION_SUPPORT:\t%s\n", error_correction_support == CL_TRUE ? "yes" : "no");

	// CL_DEVICE_LOCAL_MEM_TYPE
	cl_device_local_mem_type local_mem_type;
	clGetDeviceInfo(device, CL_DEVICE_LOCAL_MEM_TYPE, sizeof(local_mem_type), &local_mem_type, NULL);
	printf("  CL_DEVICE_LOCAL_MEM_TYPE:\t\t%s\n", local_mem_type == 1 ? "local" : "global");

	// CL_DEVICE_LOCAL_MEM_SIZE
	clGetDeviceInfo(device, CL_DEVICE_LOCAL_MEM_SIZE, sizeof(mem_size), &mem_size, NULL);
	printf("  CL_DEVICE_LOCAL_MEM_SIZE:\t\t%u KByte\n", (unsigned int)(mem_size / 1024));

	// CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE
	clGetDeviceInfo(device, CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE, sizeof(mem_size), &mem_size, NULL);
	printf("  CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE:\t%u KByte\n", (unsigned int)(mem_size / 1024));

	// CL_DEVICE_QUEUE_PROPERTIES
	cl_command_queue_properties queue_properties;
	clGetDeviceInfo(device, CL_DEVICE_QUEUE_PROPERTIES, sizeof(queue_properties), &queue_properties, NULL);
	if (queue_properties & CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE)
		printf("  CL_DEVICE_QUEUE_PROPERTIES:\t\t%s\n", "CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE");
	if (queue_properties & CL_QUEUE_PROFILING_ENABLE)
		printf("  CL_DEVICE_QUEUE_PROPERTIES:\t\t%s\n", "CL_QUEUE_PROFILING_ENABLE");

	// CL_DEVICE_IMAGE_SUPPORT
	cl_bool image_support;
	clGetDeviceInfo(device, CL_DEVICE_IMAGE_SUPPORT, sizeof(image_support), &image_support, NULL);
	printf("  CL_DEVICE_IMAGE_SUPPORT:\t\t%u\n", image_support);

	// CL_DEVICE_MAX_READ_IMAGE_ARGS
	cl_uint max_read_image_args;
	clGetDeviceInfo(device, CL_DEVICE_MAX_READ_IMAGE_ARGS, sizeof(max_read_image_args), &max_read_image_args, NULL);
	printf("  CL_DEVICE_MAX_READ_IMAGE_ARGS:\t%u\n", max_read_image_args);

	// CL_DEVICE_MAX_WRITE_IMAGE_ARGS
	cl_uint max_write_image_args;
	clGetDeviceInfo(device, CL_DEVICE_MAX_WRITE_IMAGE_ARGS, sizeof(max_write_image_args), &max_write_image_args, NULL);
	printf("  CL_DEVICE_MAX_WRITE_IMAGE_ARGS:\t%u\n", max_write_image_args);

	// CL_DEVICE_IMAGE2D_MAX_WIDTH, CL_DEVICE_IMAGE2D_MAX_HEIGHT, CL_DEVICE_IMAGE3D_MAX_WIDTH, CL_DEVICE_IMAGE3D_MAX_HEIGHT, CL_DEVICE_IMAGE3D_MAX_DEPTH
	size_t szMaxDims[5];
	printf("\n  CL_DEVICE_IMAGE <dim>");
	clGetDeviceInfo(device, CL_DEVICE_IMAGE2D_MAX_WIDTH, sizeof(size_t), &szMaxDims[0], NULL);
	printf("\t\t\t2D_MAX_WIDTH\t %u\n", szMaxDims[0]);
	clGetDeviceInfo(device, CL_DEVICE_IMAGE2D_MAX_HEIGHT, sizeof(size_t), &szMaxDims[1], NULL);
	printf("\t\t\t\t\t2D_MAX_HEIGHT\t %u\n", szMaxDims[1]);
	clGetDeviceInfo(device, CL_DEVICE_IMAGE3D_MAX_WIDTH, sizeof(size_t), &szMaxDims[2], NULL);
	printf("\t\t\t\t\t3D_MAX_WIDTH\t %u\n", szMaxDims[2]);
	clGetDeviceInfo(device, CL_DEVICE_IMAGE3D_MAX_HEIGHT, sizeof(size_t), &szMaxDims[3], NULL);
	printf("\t\t\t\t\t3D_MAX_HEIGHT\t %u\n", szMaxDims[3]);
	clGetDeviceInfo(device, CL_DEVICE_IMAGE3D_MAX_DEPTH, sizeof(size_t), &szMaxDims[4], NULL);
	printf("\t\t\t\t\t3D_MAX_DEPTH\t %u\n", szMaxDims[4]);

	// CL_DEVICE_PREFERRED_VECTOR_WIDTH_<type>
	printf("  CL_DEVICE_PREFERRED_VECTOR_WIDTH_<t>\t");
	cl_uint vec_width[6];
	clGetDeviceInfo(device, CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR, sizeof(cl_uint), &vec_width[0], NULL);
	clGetDeviceInfo(device, CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT, sizeof(cl_uint), &vec_width[1], NULL);
	clGetDeviceInfo(device, CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT, sizeof(cl_uint), &vec_width[2], NULL);
	clGetDeviceInfo(device, CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG, sizeof(cl_uint), &vec_width[3], NULL);
	clGetDeviceInfo(device, CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT, sizeof(cl_uint), &vec_width[4], NULL);
	clGetDeviceInfo(device, CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE, sizeof(cl_uint), &vec_width[5], NULL);
	printf("CHAR %u, SHORT %u, INT %u, FLOAT %u, DOUBLE %u\n\n\n",
		vec_width[0], vec_width[1], vec_width[2], vec_width[3], vec_width[4]);
}
char* loadKernelSource(const char* name) {
	FILE* fp;
	char* source_str;

	size_t source_size;

	/* Load the source code containing the kernel*/
	fp = fopen(name, "r");
	if (!fp) {
		fprintf(stderr, "Failed to load kernel.\n");
		exit(1);
	}
	source_str = (char*)malloc(MAX_SOURCE_SIZE);
	source_size = fread(source_str, 1, MAX_SOURCE_SIZE, fp);
	fclose(fp);
	source_str[source_size] = '\0';
	return source_str;
}
typedef struct OpenClRuntime {
	cl_platform_id platform_id = NULL;
	cl_int ret;
	cl_device_id device_id = NULL;
	cl_uint ret_num_platforms;
	cl_context context = NULL;
	cl_program program = NULL;
	cl_uint ret_num_devices;
	cl_command_queue command_queue = NULL;
	cl_kernel kernel = NULL;
};
cl_kernel loadKernel(OpenClRuntime* context, const char* name) {
	int ret;
	context->kernel = clCreateKernel(context->program, name, &ret);
	return context->kernel;
}
void finish(OpenClRuntime* d) {
	int ret;
	ret = clFlush(d->command_queue);
	ret = clFinish(d->command_queue);
	ret = clReleaseKernel(d->kernel);
	ret = clReleaseProgram(d->program);
	//ret = clReleaseMemObject(clMatrixC);
	ret = clReleaseCommandQueue(d->command_queue);
	ret = clReleaseContext(d->context);
}
OpenClRuntime* setup(const char* programName) {
	cl_platform_id platform_id = NULL;
	cl_int ret;
	cl_device_id device_id = NULL;
	cl_uint ret_num_platforms;
	cl_context context = NULL;
	cl_program program = NULL;
	cl_uint ret_num_devices;
	cl_command_queue command_queue = NULL;
	char* src = loadKernelSource(programName);
	ret = clGetPlatformIDs(1, &platform_id, &ret_num_platforms);
	ret = clGetDeviceIDs(platform_id, CL_DEVICE_TYPE_DEFAULT, 1, &device_id, &ret_num_devices);

	/* Create OpenCL context */
	context = clCreateContext(NULL, 1, &device_id, NULL, NULL, &ret);

	/* Create Command Queue */
	command_queue = clCreateCommandQueue(context, device_id, 0, &ret);

	auto src_size = strlen(src);
	/* Create Kernel Program from the source */
	printf("%s", src);
	program = clCreateProgramWithSource(context, 1, (const char**)&src,
		(const size_t*)&src_size, &ret);


	/* Build Kernel Program */
	ret = clBuildProgram(program, 1, &device_id, NULL, NULL, NULL);
	size_t len;
	ret = clGetProgramBuildInfo(program, device_id, CL_PROGRAM_BUILD_LOG, 0, NULL, &len);
	char* buffer = (char*)calloc(len, sizeof(char));
	ret = clGetProgramBuildInfo(program, device_id, CL_PROGRAM_BUILD_LOG, len, buffer, NULL);
	printf("%s", buffer);

	struct OpenClRuntime* d = new struct OpenClRuntime();
	d->command_queue = command_queue;
	d->context = context;
	d->device_id = device_id;
	d->platform_id = platform_id;
	d->program = program;
	d->ret = ret;
	d->ret_num_devices = ret_num_devices;
	d->ret_num_platforms = ret_num_platforms;
	return d;
}
char grayimg_byte[1200 * 1200];
int main()
{
	
	clock_t timeBeforeOpenCL = clock();
	cl_int ret;
	
	auto context = setup("./grayscale.cl");
	auto kernel = loadKernel(context, "grayscale");
	cl_image_format image;
	image.image_channel_data_type = CL_UNSIGNED_INT8;
	image.image_channel_order = CL_RGB;
	int width = 1200;
	int height = 1200;
	std::vector<unsigned char> imageData=std::vector<unsigned char>(1000);
	decodeOneStep("./image.png", &imageData);
	
	int err;
	cl_mem input = clCreateImage2D(context->context, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR, &image, width, height, 0, &imageData[0], &err);
	cl_mem output = clCreateImage2D(context->context, CL_MEM_WRITE_ONLY, &image, width, height, 0, NULL, &err);

	clSetKernelArg(context->kernel, 0, sizeof(cl_mem), input);
	clSetKernelArg(context->kernel, 1, sizeof(cl_mem), output);
	
	const size_t l[3] = { 0,0,0 };
	const size_t sizes[3] = { width,height,1 };

	size_t workSize[] = {width,height};
	size_t workSizelocal[] = {2, 2};
	ret = clEnqueueWriteImage(context->command_queue, input, CL_TRUE, l, sizes, width, 0, &imageData[0], 0, NULL, NULL);
	
	ret = clEnqueueNDRangeKernel(context->command_queue, kernel, 2, NULL,
		workSize, workSizelocal, 0, NULL, NULL);
	

	
	ret = clEnqueueReadImage(context->command_queue, output, CL_TRUE, l, sizes, width, 0, grayimg_byte, 0, NULL, NULL);
	

	/*
	clock_t timeBefore = clock();
    ret = clEnqueueNDRangeKernel(context->command_queue, kernel, 1, NULL, &matrixSize, NULL, 0, NULL, NULL);
    clock_t timeAfter = clock();
	double time_spent = (double)(timeAfter - timeBefore) / CLOCKS_PER_SEC;
	double time_spent_all = (double)(timeAfter - timeBeforeOpenCL) / CLOCKS_PER_SEC;



    ret = clEnqueueReadBuffer(command_queue, clMatrixC, CL_TRUE, 0,
        matrixSize * sizeof(char), matrixC, 0, NULL, NULL);
	printf("Time spent opencl: %f \n", time_spent);
	printf("Time spent opencl + JIT: %f \n", time_spent_all);

    for (int i = 0; i < matrixSize/100; i++) {
       // printf("%d", matrixC[i]);
    }
    clock_t timeBeforeRegular = clock();
	for (int i = 0; i < matrixSize; i++) {
		matrixC[1] =matrixA[1]+matrixB[1];
	}
    clock_t timeAfterRegular = clock();
	double time_spent_regular = (double)(timeAfterRegular - timeBeforeRegular) / CLOCKS_PER_SEC;
    printf("Time spent regular: %f \n", time_spent_regular);
    scanf("%s");
 
	finish(context);
    free(source_str);
	*/
    return 0;
}